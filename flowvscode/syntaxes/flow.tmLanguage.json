{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Flow",
  "scopeName": "source.flow",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#functions" },
    { "include": "#structs" },
    { "include": "#operators" },
    { "include": "#punctuation" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.flow",
          "match": "//.*$"
        },
        {
          "name": "comment.block.flow",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.flow",
          "match": "\\b(if|else|for|while|return|break|continue|in)\\b"
        },
        {
          "name": "keyword.declaration.flow",
          "match": "\\b(func|struct|let|const|var|typedef|enum|import|export|from|as)\\b"
        },
        {
          "name": "keyword.other.flow",
          "match": "\\b(new|this|self|static|public|private|extern|native|parallel|atomic|async|await)\\b"
        },
        {
          "name": "constant.language.flow",
          "match": "\\b(true|false|null|nil)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.flow",
          "match": "\\b(int|float|double|bool|string|void|char|byte|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64)\\b"
        },
        {
          "name": "storage.type.array.flow",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\[\\]"
        },
        {
          "name": "storage.type.optional.flow",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\?"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.flow",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.flow",
              "match": "\\\\(n|t|r|\\\\|\"|')"
            }
          ]
        },
        {
          "name": "string.quoted.single.flow",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.flow",
              "match": "\\\\(n|t|r|\\\\|\"|')"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.flow",
          "match": "\\b[0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?\\b"
        },
        {
          "name": "constant.numeric.hex.flow",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary.flow",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.integer.flow",
          "match": "\\b[0-9]+\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.flow",
          "match": "\\b(func)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "keyword.declaration.flow" },
            "2": { "name": "entity.name.function.flow" }
          }
        },
        {
          "name": "support.function.builtin.flow",
          "match": "\\b(print|println|len|append|make|panic|assert|sizeof)\\b"
        },
        {
          "name": "entity.name.function.call.flow",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
        }
      ]
    },
    "structs": {
      "patterns": [
        {
          "name": "entity.name.type.struct.flow",
          "match": "\\b(struct)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\{",
          "captures": {
            "1": { "name": "keyword.declaration.flow" },
            "2": { "name": "entity.name.type.struct.flow" }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.flow",
          "match": "\\+|\\-|\\*|\\/|%"
        },
        {
          "name": "keyword.operator.comparison.flow",
          "match": "==|!=|<|>|<=|>="
        },
        {
          "name": "keyword.operator.logical.flow",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.assignment.flow",
          "match": "=|\\+=|\\-=|\\*=|\\/=|%="
        },
        {
          "name": "keyword.operator.bitwise.flow",
          "match": "&|\\||\\^|~|<<|>>"
        },
        {
          "name": "keyword.operator.other.flow",
          "match": "\\.\\.|->|::|\\."
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.flow",
          "match": ";"
        },
        {
          "name": "punctuation.separator.flow",
          "match": ","
        },
        {
          "name": "punctuation.section.braces.flow",
          "match": "\\{|\\}"
        },
        {
          "name": "punctuation.section.brackets.flow",
          "match": "\\[|\\]"
        },
        {
          "name": "punctuation.section.parens.flow",
          "match": "\\(|\\)"
        }
      ]
    }
  }
}

