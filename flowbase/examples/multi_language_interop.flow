// Multi-Language Interop Example
// Demonstrates using multiple language adapters in one program

// C standard library (always available)
link "c" {
    func sin(x: float) -> float;
    func cos(x: float) -> float;
    func strlen(s: string) -> int;
}

// Python for scientific computing
// link "python:math" {
//     func factorial(n: int) -> int;
//     func gcd(a: int, b: int) -> int;
// }

// JavaScript for string/path utilities
// link "javascript:path" {
//     func join(a: string, b: string) -> string;
// }

// Rust for performance-critical code
// link "rust:flowmath" {
//     func rust_fibonacci(n: int) -> int;
// }

// Go for concurrent operations
// link "go:flowgo" {
//     func GoAdd(a: int, b: int) -> int;
// }

func demonstrateCInterop() {
    print("=== C Interop (always available) ===");
    
    let sineVal: float = sin(1.57); // sin(π/2) ≈ 1
    print("sin(π/2) = " + sineVal);
    
    let cosVal: float = cos(0.0); // cos(0) = 1
    print("cos(0) = " + cosVal);
    
    let length: int = strlen("Flow Language");
    print("strlen('Flow Language') = " + length);
}

func demonstratePythonInterop() {
    print("=== Python Interop (if available) ===");
    
    // Uncomment if Python is available:
    // let fact: int = factorial(5);
    // print("factorial(5) = " + fact);
    
    print("Python interop skeleton ready");
}

func demonstrateJavaScriptInterop() {
    print("=== JavaScript Interop (if available) ===");
    
    // Uncomment if Node.js is available:
    // let path: string = join("/home", "user");
    // print("join('/home', 'user') = " + path);
    
    print("JavaScript interop skeleton ready");
}

func demonstrateRustInterop() {
    print("=== Rust Interop (if library available) ===");
    
    // Uncomment if Rust library is built:
    // let fib: int = rust_fibonacci(10);
    // print("rust_fibonacci(10) = " + fib);
    
    print("Rust interop skeleton ready");
}

func demonstrateGoInterop() {
    print("=== Go Interop (if library available) ===");
    
    // Uncomment if Go library is built:
    // let sum: int = GoAdd(42, 58);
    // print("GoAdd(42, 58) = " + sum);
    
    print("Go interop skeleton ready");
}

func main() {
    print("╔═══════════════════════════════════════════╗");
    print("║  Multi-Language Interop Demonstration    ║");
    print("╚═══════════════════════════════════════════╝");
    print("");
    print("Flow can interoperate with multiple languages!");
    print("");
    
    demonstrateCInterop();
    print("");
    
    demonstratePythonInterop();
    print("");
    
    demonstrateJavaScriptInterop();
    print("");
    
    demonstrateRustInterop();
    print("");
    
    demonstrateGoInterop();
    print("");
    
    print("╔═══════════════════════════════════════════╗");
    print("║  Language Interop Performance Notes:     ║");
    print("╠═══════════════════════════════════════════╣");
    print("║  C/C++/Rust/Go:  ~5ns overhead (FFI)     ║");
    print("║  Python:         ~50ns (embedded)        ║");
    print("║  JavaScript:     ~50ns (V8 embedded)     ║");
    print("║  JVM languages:  ~100ns (JNI)            ║");
    print("║  Subprocess:     ~1-5µs                  ║");
    print("╚═══════════════════════════════════════════╝");
}

