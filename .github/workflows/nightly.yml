name: Nightly Tests

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  nightly-build:
    name: Nightly Build - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install LLVM (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 21
        sudo apt-get install -y llvm-21-dev libclang-21-dev libffi-dev
        
    - name: Install LLVM (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install llvm
        echo "LLVM_DIR=$(brew --prefix llvm)" >> $GITHUB_ENV
        
    - name: Install LLVM (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install llvm
        echo "LLVM_DIR=C:\Program Files\LLVM" >> $env:GITHUB_ENV
        
    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      working-directory: flowbase
      run: |
        rm -rf build
        mkdir -p build
        cd build
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          cmake .. -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=/usr/lib/llvm-21/cmake
        else
          cmake .. -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=$(brew --prefix llvm)/lib/cmake/llvm
        fi
        
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: flowbase
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR="C:\Program Files\LLVM\lib\cmake\llvm"
        
    - name: Build (Unix)
      if: matrix.os != 'windows-latest'
      working-directory: flowbase/build
      run: make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
      
    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: flowbase/build
      run: cmake --build . --config Release
      
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        
    - name: Build River
      working-directory: river
      run: cargo build --release --verbose
      
    - name: Test River
      working-directory: river
      run: cargo test --release --verbose
      
    - name: Extended Test Suite (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x flowbase/build/flowbase
        chmod +x flowbase/build/flow-lsp
        for example in flowbase/examples/*.flow; do
          echo "Testing $example..."
          ./flowbase/build/flowbase "$example" || echo "Failed: $example"
        done
        
    - name: Extended Test Suite (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Get-ChildItem flowbase\examples\*.flow | ForEach-Object {
          Write-Host "Testing $_..."
          & flowbase\build\Release\flowbase.exe $_.FullName
        }
        
  report-status:
    name: Report Nightly Status
    needs: nightly-build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Create Issue on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `ðŸŒ™ Nightly Build Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `The nightly build has failed. Please check the [workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`;
          
          // Check if an issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'nightly-failure',
            per_page: 1
          });
          
          if (issues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['nightly-failure', 'automated']
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues.data[0].number,
              body: `Another failure occurred. [View run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });
          }
          
    - name: Close Issue on Success
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'nightly-failure'
          });
          
          for (const issue of issues.data) {
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: 'âœ… Nightly builds are now passing. This issue has been automatically closed.'
            });
          }

