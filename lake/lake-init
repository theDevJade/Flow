#!/bin/sh
# Lake - The Flow toolchain installer (inspired by rustup)
# Run with: curl --proto '=https' --tlsv1.2 -sSf https://lake.flow-lang.org/init | sh

set -e

# Save the script path before any directory changes
SCRIPT_PATH="$(cd "$(dirname "$0")" && pwd)/$(basename "$0")"

# Colors
if [ -t 1 ]; then
    BOLD='\033[1m'
    CYAN='\033[1;36m'
    GREEN='\033[1;32m'
    YELLOW='\033[1;33m'
    RED='\033[1;31m'
    NC='\033[0m'
else
    BOLD=''
    CYAN=''
    GREEN=''
    YELLOW=''
    RED=''
    NC=''
fi

# Constants
LAKE_VERSION="0.2.0"
FLOW_HOME="${FLOW_HOME:-$HOME/.flow}"
LAKE_BIN="$FLOW_HOME/bin"
LAKE_DIST_SERVER="${LAKE_DIST_SERVER:-https://github.com/theDevJade/flow/releases}"

# Detect OS and architecture
get_architecture() {
    local arch=$(uname -m)
    case $arch in
        x86_64|amd64)
            echo "x86_64"
            ;;
        aarch64|arm64)
            echo "aarch64"
            ;;
        *)
            echo "${RED}error:${NC} Unsupported architecture: $arch" >&2
            exit 1
            ;;
    esac
}

get_os() {
    local os=$(uname -s)
    case $os in
        Linux)
            echo "unknown-linux-gnu"
            ;;
        Darwin)
            echo "apple-darwin"
            ;;
        MINGW*|MSYS*|CYGWIN*)
            echo "pc-windows-msvc"
            ;;
        *)
            echo "${RED}error:${NC} Unsupported OS: $os" >&2
            exit 1
            ;;
    esac
}

# Banner
print_banner() {
    cat << 'BANNER'
    ___     ______  ____        ___  ____        __
   / __)   (  ___ \(___ \      / __)(___ \      /  \
  | |__ _   )___) ) ___) )    | |__  ___) )    / /\ \
  |  __)   (  ___/ (___ (     |__  )(__ (    ( (_  ) )
  | |      | |     ___) )    ___| |___) )    \ \/ /
  |_|      |_|    (____/    (______)(____/     \__/

  Lake - The Flow Toolchain Installer
BANNER
}

main() {
    print_banner
    echo ""
    echo "${CYAN}info:${NC} installing Flow toolchain"
    echo ""

    # Detect platform
    local arch=$(get_architecture)
    local os=$(get_os)
    local triple="$arch-$os"
    
    echo "${CYAN}info:${NC} platform: ${BOLD}$triple${NC}"
    echo ""

    # Check for existing installation
    if [ -d "$FLOW_HOME" ]; then
        echo "${YELLOW}warning:${NC} Flow is already installed at $FLOW_HOME"
        printf "Would you like to update it? (y/N) "
        read -r response
        if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
            echo "${CYAN}info:${NC} installation cancelled"
            exit 0
        fi
        echo ""
    fi

    # Create directories
    mkdir -p "$LAKE_BIN"
    mkdir -p "$FLOW_HOME/toolchains"
    mkdir -p "$FLOW_HOME/downloads"

    echo "${CYAN}info:${NC} checking for prebuilt binaries..."
    
    # Try to download prebuilt binaries
    if download_prebuilt "$triple"; then
        echo "${GREEN}success:${NC} downloaded prebuilt toolchain"
    else
        echo "${YELLOW}warning:${NC} prebuilt binaries not available"
        echo "${CYAN}info:${NC} building from source..."
        build_from_source
    fi

    # Install lake script itself
    install_lake

    # Setup PATH
    setup_environment

    echo ""
    echo "${GREEN}${BOLD}âœ“ Flow toolchain installed successfully!${NC}"
    echo ""
    echo "To get started, run:"
    echo ""
    echo "  ${CYAN}source $FLOW_HOME/env${NC}  (or restart your terminal)"
    echo "  ${CYAN}flow --version${NC}"
    echo "  ${CYAN}river --version${NC}"
    echo ""
    echo "To configure your current shell, run:"
    echo "  ${CYAN}source \"$FLOW_HOME/env\"${NC}"
    echo ""
}

download_prebuilt() {
    local triple=$1
    
    # Get the latest release tag from GitHub API
    local latest_tag=$(curl -s "https://api.github.com/repos/theDevJade/flow/releases/latest" | grep -o '"tag_name": "[^"]*"' | cut -d'"' -f4)
    if [ -z "$latest_tag" ]; then
        echo "${RED}error:${NC} Could not determine latest release" >&2
        return 1
    fi
    
    # Map platform triple to release asset names
    local platform=""
    case $triple in
        *apple-darwin*)
            platform="macos"
            ;;
        *unknown-linux-gnu*)
            platform="ubuntu"
            ;;
        *pc-windows-msvc*)
            platform="windows"
            ;;
        *)
            echo "${RED}error:${NC} Unsupported platform: $triple" >&2
            return 1
            ;;
    esac
    
    # Try downloading from GitHub releases
    local base_url="$LAKE_DIST_SERVER/download/$latest_tag"
    local flowbase_url="$base_url/flowbase-$platform-latest.zip"
    local flow_lsp_url="$base_url/flow-lsp-$platform-latest.zip"
    local river_url="$base_url/river-$platform-latest.zip"
    
    local download_dir="$FLOW_HOME/downloads"
    
    echo "${CYAN}info:${NC} downloading Flow compiler..."
    if curl --retry 3 -f -L "$flowbase_url" -o "$download_dir/flowbase.zip" 2>/dev/null; then
        echo "${CYAN}info:${NC} extracting Flow compiler..."
        if command -v unzip >/dev/null 2>&1; then
            unzip -q "$download_dir/flowbase.zip" -d "$LAKE_BIN"
        else
            # Fallback to tar if unzip not available
            tar -xf "$download_dir/flowbase.zip" -C "$LAKE_BIN"
        fi
        rm "$download_dir/flowbase.zip"
        
        echo "${CYAN}info:${NC} downloading Flow language server..."
        if curl --retry 3 -f -L "$flow_lsp_url" -o "$download_dir/flow-lsp.zip" 2>/dev/null; then
            if command -v unzip >/dev/null 2>&1; then
                unzip -q "$download_dir/flow-lsp.zip" -d "$LAKE_BIN"
            else
                tar -xf "$download_dir/flow-lsp.zip" -C "$LAKE_BIN"
            fi
            rm "$download_dir/flow-lsp.zip"
        fi
        
        echo "${CYAN}info:${NC} downloading River package manager..."
        if curl --retry 3 -f -L "$river_url" -o "$download_dir/river.zip" 2>/dev/null; then
            if command -v unzip >/dev/null 2>&1; then
                unzip -q "$download_dir/river.zip" -d "$LAKE_BIN"
            else
                tar -xf "$download_dir/river.zip" -C "$LAKE_BIN"
            fi
            rm "$download_dir/river.zip"
            return 0
        fi
    fi
    
    return 1
}

build_from_source() {
    echo "${CYAN}info:${NC} checking build dependencies..."
    
    # Check for required tools
    for tool in git cmake make cargo; do
        if ! command -v $tool >/dev/null 2>&1; then
            echo "${RED}error:${NC} required tool not found: $tool"
            echo ""
            echo "Please install the following:"
            echo "  - Git"
            echo "  - CMake (3.15+)"
            echo "  - C++ compiler (GCC/Clang)"
            echo "  - Rust (for River package manager)"
            echo "  - LLVM (12+)"
            echo ""
            echo "On macOS: brew install llvm cmake git rust"
            echo "On Ubuntu: sudo apt-get install build-essential cmake llvm-dev libllvm-dev clang cargo"
            exit 1
        fi
    done
    
    # Check for LLVM
    if ! command -v llvm-config >/dev/null 2>&1; then
        echo "${RED}error:${NC} LLVM not found"
        echo "Please install LLVM 12 or later"
        exit 1
    fi
    
    local llvm_version=$(llvm-config --version)
    echo "${CYAN}info:${NC} found LLVM $llvm_version"
    
    # Clone repository
    local src_dir="$FLOW_HOME/src"
    if [ -d "$src_dir" ]; then
        echo "${CYAN}info:${NC} updating source..."
        cd "$src_dir"
        git pull origin main
    else
        echo "${CYAN}info:${NC} cloning repository..."
        git clone --depth 1 https://github.com/theDevJade/flow.git "$src_dir"
        cd "$src_dir"
    fi
    
    # Build Flow compiler
    echo "${CYAN}info:${NC} building Flow compiler (this may take a few minutes)..."
    cd "$src_dir/flowbase"
    mkdir -p build
    cd build
    cmake .. >/dev/null
    make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4) >/dev/null
    
    cp flowbase "$LAKE_BIN/flow"
    cp flow-lsp "$LAKE_BIN/flow-lsp"
    
    # Build River package manager
    echo "${CYAN}info:${NC} building River package manager..."
    cd "$src_dir/river"
    cargo build --release >/dev/null 2>&1
    
    cp target/release/river "$LAKE_BIN/river"
    
    echo "${GREEN}success:${NC} built from source"
}

install_lake() {
    # Copy this script to the bin directory
    cp "$SCRIPT_PATH" "$LAKE_BIN/lake"
    chmod +x "$LAKE_BIN/lake"
}

setup_environment() {
    # Create env file
    cat > "$FLOW_HOME/env" << 'ENVFILE'
#!/bin/sh
# Flow environment setup

case ":${PATH}:" in
    *:"$HOME/.flow/bin":*)
        ;;
    *)
        export PATH="$HOME/.flow/bin:$PATH"
        ;;
esac

export FLOW_HOME="$HOME/.flow"
ENVFILE

    # Try to add to shell profiles
    for profile in "$HOME/.bashrc" "$HOME/.zshrc" "$HOME/.profile"; do
        if [ -f "$profile" ]; then
            if ! grep -q "\.flow/env" "$profile" 2>/dev/null; then
                echo "" >> "$profile"
                echo "# Flow toolchain" >> "$profile"
                echo "[ -f \"\$HOME/.flow/env\" ] && source \"\$HOME/.flow/env\"" >> "$profile"
                echo "${CYAN}info:${NC} added to $(basename $profile)"
            fi
        fi
    done
}

# Run main function
main "$@"
