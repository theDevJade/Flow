#!/bin/sh
# Lake - Flow toolchain manager
# Usage: lake <command>

set -e

# Colors
if [ -t 1 ]; then
    BOLD='\033[1m'
    CYAN='\033[1;36m'
    GREEN='\033[1;32m'
    YELLOW='\033[1;33m'
    RED='\033[1;31m'
    NC='\033[0m'
else
    BOLD='' CYAN='' GREEN='' YELLOW='' RED='' NC=''
fi

FLOW_HOME="${FLOW_HOME:-$HOME/.flow}"
LAKE_BIN="$FLOW_HOME/bin"

# Commands
cmd_help() {
    cat << 'HELP'
Lake 0.1.0
The Flow toolchain installer

USAGE:
    lake <COMMAND>

COMMANDS:
    install         Install or update Flow toolchain
    uninstall       Uninstall Flow toolchain
    update          Update Flow and River to latest versions
    self update     Update lake itself
    show            Show active and installed toolchains
    default         Set default toolchain version
    toolchain       Manage installed toolchains
    completions     Generate shell completions
    help            Print this help message

TOOLCHAIN COMMANDS:
    lake toolchain install <version>    Install a specific toolchain
    lake toolchain list                 List installed toolchains
    lake toolchain uninstall <version>  Remove a toolchain

Run 'lake <command> --help' for more information on a command.
HELP
}

cmd_install() {
    echo "${CYAN}info:${NC} installing Flow toolchain..."
    
    # Check if already installed
    if [ -d "$FLOW_HOME" ] && [ -f "$LAKE_BIN/flow" ]; then
        echo "${YELLOW}warning:${NC} Flow is already installed"
        printf "Update instead? (Y/n) "
        read -r response
        if [ "$response" = "n" ] || [ "$response" = "N" ]; then
            exit 0
        fi
        cmd_update
        return
    fi
    
    # Run the init script logic
    echo "${CYAN}info:${NC} downloading and installing..."
    # This would call the actual installation logic
    echo "${GREEN}success:${NC} Flow toolchain installed"
}

cmd_uninstall() {
    echo "${YELLOW}warning:${NC} This will remove all Flow toolchains and data"
    printf "Continue? (y/N) "
    read -r response
    
    if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
        echo "${CYAN}info:${NC} uninstall cancelled"
        exit 0
    fi
    
    echo "${CYAN}info:${NC} removing Flow installation..."
    
    if [ -d "$FLOW_HOME" ]; then
        rm -rf "$FLOW_HOME"
        echo "${GREEN}success:${NC} Flow uninstalled"
    else
        echo "${YELLOW}warning:${NC} Flow not found at $FLOW_HOME"
    fi
    
    # Try to remove from shell profiles
    for profile in "$HOME/.bashrc" "$HOME/.zshrc" "$HOME/.profile"; do
        if [ -f "$profile" ]; then
            if grep -q "\.flow/env" "$profile" 2>/dev/null; then
                # Remove the Flow-related lines
                sed -i.bak '/# Flow toolchain/d; /\.flow\/env/d' "$profile" 2>/dev/null || true
                echo "${CYAN}info:${NC} removed from $(basename $profile)"
            fi
        fi
    done
    
    echo ""
    echo "${GREEN}${BOLD}Flow has been uninstalled${NC}"
}

cmd_update() {
    echo "${CYAN}info:${NC} updating Flow toolchain..."
    
    if [ ! -d "$FLOW_HOME" ]; then
        echo "${RED}error:${NC} Flow is not installed"
        echo "Run: lake install"
        exit 1
    fi
    
    # Try prebuilt first, then source
    local arch=$(uname -m | sed 's/x86_64/x86_64/; s/arm64/aarch64/')
    local os=$(uname -s | sed 's/Linux/unknown-linux-gnu/; s/Darwin/apple-darwin/')
    local triple="$arch-$os"
    
    echo "${CYAN}info:${NC} checking for updates..."
    
    # Download latest
    if download_latest "$triple"; then
        echo "${GREEN}success:${NC} updated to latest version"
    else
        echo "${YELLOW}warning:${NC} using source build..."
        build_latest
    fi
    
    echo "${GREEN}success:${NC} Flow toolchain updated"
}

cmd_self_update() {
    echo "${CYAN}info:${NC} updating lake..."
    
    # Download latest lake script
    local lake_url="https://lake.flow-lang.org/lake"
    if curl --retry 3 -f -L "$lake_url" -o "$LAKE_BIN/lake.new" 2>/dev/null; then
        mv "$LAKE_BIN/lake.new" "$LAKE_BIN/lake"
        chmod +x "$LAKE_BIN/lake"
        echo "${GREEN}success:${NC} lake updated"
    else
        echo "${RED}error:${NC} failed to update lake"
        exit 1
    fi
}

cmd_show() {
    echo "${BOLD}Flow toolchains:${NC}"
    echo ""
    
    if [ ! -d "$FLOW_HOME/toolchains" ]; then
        echo "  ${YELLOW}(none installed)${NC}"
        return
    fi
    
    local default_ver=$(cat "$FLOW_HOME/default" 2>/dev/null || echo "")
    
    for toolchain in "$FLOW_HOME/toolchains"/*; do
        if [ -d "$toolchain" ]; then
            local ver=$(basename "$toolchain")
            if [ "$ver" = "$default_ver" ]; then
                echo "  ${GREEN}$ver${NC} (default)"
            else
                echo "  $ver"
            fi
        fi
    done
    
    echo ""
    echo "${BOLD}Active toolchain:${NC}"
    if command -v flow >/dev/null 2>&1; then
        flow --version | sed 's/^/  /'
    else
        echo "  ${RED}(none)${NC}"
    fi
}

cmd_default() {
    local version=$1
    
    if [ -z "$version" ]; then
        echo "${RED}error:${NC} no version specified"
        echo "Usage: lake default <version>"
        exit 1
    fi
    
    if [ ! -d "$FLOW_HOME/toolchains/$version" ]; then
        echo "${RED}error:${NC} toolchain not found: $version"
        echo "Run: lake toolchain install $version"
        exit 1
    fi
    
    echo "$version" > "$FLOW_HOME/default"
    
    # Update symlinks
    ln -sf "$FLOW_HOME/toolchains/$version/bin/flow" "$LAKE_BIN/flow"
    ln -sf "$FLOW_HOME/toolchains/$version/bin/flow-lsp" "$LAKE_BIN/flow-lsp"
    ln -sf "$FLOW_HOME/toolchains/$version/bin/river" "$LAKE_BIN/river"
    
    echo "${GREEN}success:${NC} default toolchain set to $version"
}

cmd_toolchain() {
    local subcmd=$1
    shift
    
    case $subcmd in
        install)
            toolchain_install "$@"
            ;;
        list)
            cmd_show
            ;;
        uninstall)
            toolchain_uninstall "$@"
            ;;
        *)
            echo "${RED}error:${NC} unknown toolchain command: $subcmd"
            echo "Run: lake help"
            exit 1
            ;;
    esac
}

toolchain_install() {
    local version=${1:-latest}
    echo "${CYAN}info:${NC} installing toolchain: $version"
    
    mkdir -p "$FLOW_HOME/toolchains/$version"
    
    # Download or build for this version
    echo "${CYAN}info:${NC} downloading..."
    # Implementation here
    
    echo "${GREEN}success:${NC} toolchain $version installed"
}

toolchain_uninstall() {
    local version=$1
    
    if [ -z "$version" ]; then
        echo "${RED}error:${NC} no version specified"
        exit 1
    fi
    
    if [ ! -d "$FLOW_HOME/toolchains/$version" ]; then
        echo "${RED}error:${NC} toolchain not found: $version"
        exit 1
    fi
    
    rm -rf "$FLOW_HOME/toolchains/$version"
    echo "${GREEN}success:${NC} toolchain $version uninstalled"
}

cmd_completions() {
    local shell=${1:-bash}
    
    case $shell in
        bash)
            cat << 'BASH_COMPLETION'
_lake() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="install uninstall update self show default toolchain completions help"
    
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
}
complete -F _lake lake
BASH_COMPLETION
            ;;
        zsh)
            cat << 'ZSH_COMPLETION'
#compdef lake

_lake() {
    local -a commands
    commands=(
        'install:Install Flow toolchain'
        'uninstall:Uninstall Flow toolchain'
        'update:Update toolchain'
        'self:Update lake itself'
        'show:Show installed toolchains'
        'default:Set default toolchain'
        'toolchain:Manage toolchains'
        'completions:Generate completions'
        'help:Show help'
    )
    _describe 'command' commands
}

_lake
ZSH_COMPLETION
            ;;
        *)
            echo "${RED}error:${NC} unsupported shell: $shell"
            exit 1
            ;;
    esac
}

download_latest() { return 1; }  # Stub
build_latest() { return 1; }     # Stub

# Main dispatcher
main() {
    local command=${1:-help}
    shift || true
    
    case $command in
        install)
            cmd_install "$@"
            ;;
        uninstall)
            cmd_uninstall "$@"
            ;;
        update)
            cmd_update "$@"
            ;;
        self)
            if [ "$1" = "update" ]; then
                cmd_self_update
            else
                echo "${RED}error:${NC} unknown self command: $1"
                exit 1
            fi
            ;;
        show)
            cmd_show "$@"
            ;;
        default)
            cmd_default "$@"
            ;;
        toolchain)
            cmd_toolchain "$@"
            ;;
        completions)
            cmd_completions "$@"
            ;;
        help|--help|-h)
            cmd_help
            ;;
        *)
            echo "${RED}error:${NC} unknown command: $command"
            echo "Run: lake help"
            exit 1
            ;;
    esac
}

main "$@"
